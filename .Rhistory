paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep (NA, 1000)
my_data <- sample(c(x,y), 100)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na[x]]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,
x[-c(2,10)]
q
x[-c(2,10)]
vect <- (foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA).
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
q()
complete <- function(directory, id = 1:332) {
files <- list.files("specdata", full.names = TRUE)
readFiles <- data.frame()
for (i in id) {
readFiles <- c(readFiles, read.csv(files[i]))
## reads each file and combines it by row into the dataframe
## stores the sums in the nobs variable so it can be bound to the final matrix
nobs -> lapply(readFiles, sum)
readFiles
}
}
nobs -> lapply(readFiles, sum)
complete <- function(directory, id = 1:332) {
files <- list.files("specdata", full.names = TRUE)
readFiles <- data.frame()
for (i in id) {
readFiles <- c(readFiles, read.csv(files[i]))
## reads each file and combines it by row into the dataframe
## stores the sums in the nobs variable so it can be bound to the final matrix
nobs -> lapply(readFiles, sum)
}
}
nobs
complete("specdata",1)
complete <- function(directory, id = 1:332) {
files <- list.files("specdata", full.names = TRUE)
readFiles <- data.frame()
for (i in id) {
readFiles <- c(readFiles, read.csv(files[i]))
observedFiles <- readfiles[, 2:3]
## reads each file and combines it by row into the dataframe
## stores the sums in the nobs variable so it can be bound to the final matrix
nobs -> sapply(observedFiles, complete.cases)
}
}
complete("specdata", 1:10)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting the inverted matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting the inverted matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
best <- function(state,outcome){
##Read in the data
##Check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
##Get the subset of the data with the desired state
new_data <- subset(data, State == state)
##Get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best("TX", "heart attack")
best <- function(state,outcome){
##Read in the data
##Check if the state and outcomes are valid
states <- data[ ,7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
##Get the subset of the data with the desired state
new_data <- subset(data, State == state)
##Get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best("TX", "heart attack")
best <- function(state,outcome){
##Read in the data
data <- read.csv("C:/Users/Sean/Desktop/Coursera/outcome-of-care-measures.csv", colClasses = "character")
##Check if the state and outcomes are valid
states <- data[ ,7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
##Get the subset of the data with the desired state
new_data <- subset(data, State == state)
##Get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best("TX", "heart attack")
best("TE", "heart attack")
best("TX", "broken heart")
?order
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
print tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
print cran
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(-(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country ==
| "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux_gnu")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- selct(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- elect(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?graoup_by
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg_size = mean(size)
)
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
download.file(fileUrl1, destfile= "C:/Users/Sean/Desktop/Coursera/smartphones")
list.files("C:/Users/Sean/Desktop/Coursera/smartphones")
smart <- read.csv("C:/Users/Sean/Desktop/Coursera/gdp.csv")
smart <- read.csv("C:/Users/Sean/Desktop/Coursera/smartphones")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
unzipe(fileUrl1, destfile= "C:/Users/Sean/Desktop/Coursera/smartphones")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
unzip(fileUrl1, destfile= "C:/Users/Sean/Desktop/Coursera/smartphones")
unzip("C:/Users/Sean/Desktop/Coursera/smartphones")
unzip("C:/Users/Sean/Desktop/Coursera/smartphones", mode="wb")
smart <- read.table("C:/Users/Sean/Desktop/Coursera/smartphones")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
download.file(fileUrl1, destfile= "C:/Users/Sean/Desktop/Coursera/smartphones.zip")
unzip("C:/Users/Sean/Desktop/Coursera/smartphones.zip", mode="wb")
unzip("C:/Users/Sean/Desktop/Coursera/smartphones.zip")
test1 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_acc_x_train.txt")
head(test1)
train1 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_acc_x_train.txt")
train2 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_acc_y_train.txt")
train3 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_acc_z_train.txt")
train4 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_gyro_x_train.txt")
train5 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_gyro_y_train.txt")
train6 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/body_gyro_z_train.txt")
train7 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/total_acc_x_train.txt")
train8 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/total_acc_y_train.txt")
train9 <- read.table("C:/Users/Sean/Desktop/Coursera/train/Inertial Signals/total_acc_z_train.txt")
test1 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/body_acc_x_test.txt")
test2 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/body_acc_y_test.txt")
test3 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/body_acc_z_test.txt")
test4 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/body_gyro_x_test.txt")
test5 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/body_gyro_y_test.txt")
test6 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/body_gyro_z_test.txt")
test7 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/total_acc_x_test.txt")
test8 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/total_acc_y_test.txt")
test9 <- read.table("C:/Users/Sean/Desktop/Coursera/test/Inertial Signals/total_acc_z_test.txt")
head(test1, 2)
head(train1, 2)
?merge
merged1 <- merge(test1, train1)
head(mergd1, 2)
head(merged1, 2)
head(merged1)
head(merged1, values = TRUE)
merged1
merged1 <- merge(test1, train1, by = intersect(names(x), names(y)))
merged1 <- merge(test1, train1, by = intersect(names(test1), names(train1)))
head(merged1)
merged1
merged1 <- merge(test1, train1, by.x = V1, by.y = V1)
merged1 <- merge(test1, train1, by.x = test1$V1, by.y = train1$V1)
merged1 <- merge(test1, train1, by.x = "V1", by.y = "V1")
merged1
names(train1)
names(train7)
?data.frame
test <- data.frame(c(test1, test2, test3, test4, test5, test6, test7, test8, test9))
head(test,2)
names(test)
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res(students2, sex_class, count, -grade)
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,(midterm)) %>%
print
reset()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status ="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
eday(this_day)
wday(this_day)
wday(this_day, label+TRUE)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 22, minutes = 27, seconds = 51)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(hours = 17, minutes =34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive depart + hours(15) + mins(50)
arrive <- depart + hours(15) + mins(50)
arrive <- depart + hours(15) + min(50)
arrive <- depart + hours(15) + minutes(50)
?with-tz
?with_tz
arrive <- with_tz(arrive, tz = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_arrival
?new_interval
how_long <- new_interval(last_time, arrive, tzone = attr(last_time, "Singapore))
)
how_long <- new_interval(last_time, arrive)
as.period(how_long
)
stopwatch()
bye()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
setwd("C:/Users/Sean/Desktop/Coursera/ProgrammingAssignment2")
